name: 'venv setup'
description: 'configures venv, python and caches'

inputs:
  python-version:
    description: "Version range or exact version of Python or PyPy to use, using SemVer's version range syntax."
    required: false
    type: string
  python-version-file:
    description: "File containing the Python version to use. Example: .python-version"
    required: false
    type: string
  cache-dependency-path:
    description: "Requirement files to install. Can be a glob pattern."
    default: '**/requirements*.txt'
  venv-dir:
    default: 'venv'
  install-cmd:
    default: 'python3 -m pip install -r requirements.txt'
    description: 'Command to install python dependencies.'

outputs:
  cache-hit:
    description: "A boolean value to indicate if a cache was restored"
    value: ${{ steps.cache-venv.outputs.cache-hit }}
  python-version:
    description: "The installed Python or PyPy version. Useful when given a version range as input."
  python-path:
    description: "The absolute path to the Python or PyPy executable."

runs:
  using: 'composite'
  steps:
    - name: Handle python version options
      if: github.event.inputs.python-version-file == '' && github.event.inputs.python-version != ''
      steps:
        - run: echo ${{ inputs.python-version }} > .python-version

    - uses: actions/setup-python@v5  # v5.0.0
      id: setup-python
      with:
        python-version: ${{ inputs.python-version }}
        python-version-file: ${{ inputs.python-version-file }}


    - run: echo '::remove-matcher owner=python::'
      shell: bash

    - uses: actions/cache@v4  # v4.0.0
      id: cache-venv
      with:
        path: ${{ inputs.venv-dir }}
        key: setup-venv-${{ runner.os }}-py-${{ steps.setup-python.outputs.python-version }}-${{ steps.setup-python.outputs.python-path }}-${{ hashFiles(inputs.cache-dependency-path) }}-${{ inputs.install-cmd }}

    - run: python3 -m venv ${{ inputs.venv-dir }}
      if: steps.cache-venv.outputs.cache-hit != 'true'
      shell: bash

    - run: |
        source ${{ inputs.venv-dir }}/bin/activate
        echo "VIRTUAL_ENV=${VIRTUAL_ENV}" >> $GITHUB_ENV
        echo "${VIRTUAL_ENV}/bin" >> $GITHUB_PATH
      shell: bash

    - run: ${{ inputs.install-cmd }}
      if: inputs.install-cmd != '' && steps.cache-venv.outputs.cache-hit != 'true'
      shell: bash

